<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>day_number = 0;
day_number_max = settings.options[0];
night = false;
alpha = 0;
dayLength = settings.options[2];
nightLength = settings.options[3];
nightCycleSurf = surface_create(room_width,room_height);
//alarm[0] = room_speed*dayLength;
show_rounds = false;
//alarm[2] = room_speed*4;

mes_alpha = 0.5;

day_suffix[0] = "st";
day_suffix[1] = "nd";
day_suffix[2] = "rd";
day_suffix[3] = "th";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop showing rounds left
if(mes_alpha &lt; 0){
    show_rounds = false;
    //instance_activate_all();
} else {
    mes_alpha -= 0.1;
    alarm[2] = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// -&gt; Day
if (alpha &gt; 0){
    alpha -= 0.0125;
    show_rounds = true;
    alarm[1] = room_speed*0.25;
}
else
{
    if (day_number == day_number_max){
        with(player){
            state = scr_player_finish;
            image_alpha = 1;
            if(ObjectID){
                ObjectID.z = 0;
                ObjectID = noone;
            }
        }
        with(henchman){
            nightworker = false;
            show_rage = false;
            state = scr_hench_finish;
        }
        main_controller.endgame = true;
        exit;
    }
    else{
        
        night = false;
        alarm[0] = room_speed*dayLength;
        with(upgrade){
            if(used){
                goal_x = 25;
                alarm[1] = 1;
            }
        }
        with(trader){
            if(charges != max_charges){
                scr_effect(spr_Glimmer);
                charges = max_charges;
                used = 0;
            }
        }
        with(henchman) {
            if(state != scr_life_dead) {
                //show_rage = false;
                alarm[10] = 2*room_speed;
                if(state == scr_hench_sleep) {
                    phy_active = true;
                    nearest = noone;
                    near_target = noone;
                    hp = maxhp;
                    state = scr_hench_idle;
                    movement = movement.idle;
                    if(rage &gt; 0){
                        rage--;
                        scr_effect(spr_Heart);
                    }
                }
                checked_for_food = false
                night_worker = false;
            }
        }
        
        mes_alpha = 0.5;
        alarm[2] = room_speed*1;
        //instance_deactivate_all(night_controller);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// -&gt; Night
if (alpha &lt; 0.4){
    alpha += 0.0125;
    alarm[0] = room_speed*0.25;
}
else{
    day_number += 1;
    with(henchman) {
        if(state != scr_life_dead &amp;&amp; state != scr_hench_demon){
            /*if (state == scr_hench_idle) {
                night_worker = true;
            } else {*/
                if (!night_worker &amp;&amp; state != scr_hench_dropoff){
                    image_alpha = 1;
                    current_job = noone;
                    job_index = 0;
                    progress = 0;
                    held = true;
                    z = 0;
                }
            //}
            if(owner.ObjectID != id &amp;&amp; state != scr_hench_dropoff) {
                state = scr_hench_return_home;
            }
        }
    }
    night = true;
    alarm[1] = room_speed*nightLength;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(nightCycleSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(nightCycleSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(nightCycleSurf)
{
    nightCycleSurf = surface_create(room_width,room_height);
}
else{
    surface_set_target(nightCycleSurf);
    draw_clear(c_black);
    
    if(alpha &gt; 0){
        with(player){
            if(state==scr_player_movement){
                draw_set_blend_mode(bm_src_colour);
                draw_sprite_ext(spr_light,0,x+image_xscale*11,y-8,glow_size,glow_size,0,c_white,1);
                draw_set_blend_mode(bm_normal);
            }
        }
        
        with(stat_torch){
            draw_set_blend_mode(bm_src_colour);
            draw_sprite_ext(spr_light,0,x,y-sprite_yoffset+4,glow_size,glow_size,0,c_white,1);
            draw_set_blend_mode(bm_normal);
        }
        with(dropoff){
            draw_set_blend_mode(bm_src_colour);
            draw_set_alpha(0.3)
            draw_circle(x,y,glow_size,0)
            draw_circle(x,y,glow_size*0.8,0)
            draw_circle(x,y,glow_size*0.6,0)
            draw_set_alpha(1)
            draw_set_blend_mode(bm_normal);
        }
    }
    
    surface_reset_target();
    draw_surface_ext(nightCycleSurf,0,0,1,1,0,c_white,alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (show_rounds) {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle)
    draw_set_font(fnt_title);
    draw_set_color(c_white);
    var vx = view_wview[0];
    var vy = view_hview[0];
    
    var suffix = 0;
    if(day_number &gt; 3) {
        suffix = 3;
    } else {
        suffix = day_number;
    }
    draw_set_alpha(alpha*2);
    if(day_number == 0){
        draw_text(vx*.5,1+vy*.5,"Dawn of the first day");
    } else {
        var sq = sqrt(day_number);
        if(day_number_max-day_number &gt; 1){
            draw_text(vx*.5,vy*.5,string(1+day_number_max-day_number)+"#days remaining");
            
            //draw_text_colour(vx*.5,vy*.3,"Dawn of the "+string(day_number+1)+string(day_suffix[suffix])+" day",c_yellow,c_orange,c_orange,c_red,mes_alpha);
            //draw_text_transformed(vx*.5,vy*.5+32,"Dawn of the "+string(day_number+1)+string(day_suffix[suffix])+" day",1,-1,0);
        } else {
            if(day_number_max-day_number != 0) {
                draw_text(vx*.5,vy*.5,"Dawn of the last day");
            }
        }
    }
    draw_set_alpha(1);
    draw_set_font(fnt_text);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
