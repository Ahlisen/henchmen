<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_rd3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>parent_lifeform</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

alarm[1] = 10;
norm_sprite_yoffset = sprite_yoffset;
agility = 3;
glow_size = 1;
minions = 2;
awake = 0;
norm_armor = 2;
armor = norm_armor;
norm_maxhp = 10;
maxhp = norm_maxhp;
norm_pwr = 3;//3;
pwr = norm_pwr;
hp = maxhp;
norm_movespd = 2;
movespd = norm_movespd;
key_spd = 0;
key_dir = 0;
points = 0;
end_counter = 0;
zspd = 0;
angle = 0;
hspd = 0;
vspd = 0;
vib = 0;

audio_em = audio_emitter_create();

state = scr_player_movement;

face = face.r_down;
movement = movement.idle;

//Create sprite array
sprite[movement.idle, face.r_down] = spr_player_idle_rd3;
sprite[movement.idle, face.r_up] = spr_player_idle_ru3;
sprite[movement.idle, face.l_up] = spr_player_idle_ru3;
sprite[movement.idle, face.l_down] = spr_player_idle_rd3;

sprite[movement.run, face.r_down] = spr_player_run_rd3;
sprite[movement.run, face.r_up] = spr_player_run_rd3;
sprite[movement.run, face.l_up] = spr_player_run_rd3;
sprite[movement.run, face.l_down] = spr_player_run_rd3;

sprite[movement.swim, face.r_down] = spr_player_swim;
sprite[movement.swim, face.r_up] = spr_player_swim;
sprite[movement.swim, face.l_up] = spr_player_swim;
sprite[movement.swim, face.l_down] = spr_player_swim;

sprite[movement.throw, face.r_down] = spr_player_prepthrow;
sprite[movement.throw, face.r_up] = spr_player_prepthrow;
sprite[movement.throw, face.l_up] = spr_player_prepthrow;
sprite[movement.throw, face.l_down] = spr_player_prepthrow;

sprite[movement.dash, face.r_down] = spr_dash_rd;
sprite[movement.dash, face.r_up] = spr_dash_rd;
sprite[movement.dash, face.l_up] = spr_dash_rd;
sprite[movement.dash, face.l_down] = spr_dash_rd;

sprite[movement.fall, face.r_down] = spr_player_fall_rd;
sprite[movement.fall, face.r_up] = spr_player_fall_rd;
sprite[movement.fall, face.l_up] = spr_player_fall_rd;
sprite[movement.fall, face.l_down] = spr_player_fall_rd;

sprite[movement.groundpound, face.r_down] = spr_player_groundpound;
sprite[movement.groundpound, face.r_up] = spr_player_groundpound;
sprite[movement.groundpound, face.l_up] = spr_player_groundpound;
sprite[movement.groundpound, face.l_down] = spr_player_groundpound;

sprite[movement.prepjump, face.r_down] = spr_player_prepjump;
sprite[movement.prepjump, face.r_up] = spr_player_prepjump;
sprite[movement.prepjump, face.l_up] = spr_player_prepjump;
sprite[movement.prepjump, face.l_down] = spr_player_prepjump;

sprite[movement.pickup, face.r_down] = spr_player_lift;
sprite[movement.pickup, face.r_up] = spr_player_lift;
sprite[movement.pickup, face.l_up] = spr_player_lift;
sprite[movement.pickup, face.l_down] = spr_player_lift;

sprite[movement.punch, face.r_down] = spr_player_punch_rd3;
sprite[movement.punch, face.r_up] = spr_player_punch_rd3;
sprite[movement.punch, face.l_up] = spr_player_punch_rd3;
sprite[movement.punch, face.l_down] = spr_player_punch_rd3;

sprite[movement.punch2, face.r_down] = spr_player_punch2;
sprite[movement.punch2, face.r_up] = spr_player_punch2;
sprite[movement.punch2, face.l_up] = spr_player_punch2;
sprite[movement.punch2, face.l_down] = spr_player_punch2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Palette

//Creating an unique palette for drawing
//Creating a palette for currenlty used sprite
palette_index = pal_palette_create(sprite_index);
//Chaning used palette to random one
//If you set argument to true - palettes will also be merged between each other
pal_palette_random( false );

alarm[11] = 2;
//When drawing, palette_index must be used instead of image_blend
//Setting it right here so I don't have to add Draw event
image_blend = palette_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Palette destroy &amp; audio
pal_palette_destroy( palette_index );
audio_emitter_free( audio_em );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///team color
pal_palette_slot( team, spr_player_pal )
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (vib &gt; 0) {
    vib -= 0.1;
    alarm[4] = 5;
}

gamepad_set_vibration(team, vib, vib);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sand particles and footsteps

if (phy_speed&gt;1){
    var sand = instance_create(x+random(8)-4,y+sprite_yoffset+random(6)-3,anim_end);
    sand.image_speed = 0.25;
}
else{
    part_particles_create(global.ps,x+irandom(4)-2,y+norm_sprite_yoffset,global.pt_footstep,1);
}
alarm[1] = 15;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//current_pal += choose(0,0.03,-0.03);
//current_pal=wrap(current_pal,0,pal_swap_get_pal_count(my_pal_sprite)-1);

if (ObjectID &amp;&amp; state != scr_player_prepthrow)
{
    ObjectID.phy_position_x = phy_position_x;
    ObjectID.phy_position_y = phy_position_y;
    ObjectID.z = norm_sprite_yoffset+z;
    ObjectID.depth = depth-12;
    ObjectID.image_xscale = image_xscale;
}

glow_size += choose(0,0.02,-0.02);
glow_size = clamp(glow_size,0.95,1.05);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_beach">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == scr_player_swim){
    state = scr_player_movement;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_water">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state != scr_player_swim){
    on_fire = false;
    state = scr_player_swim;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="henchman">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NOTHING

/*if (ObjectID || other.held == true || other.team != team || other.state == scr_life_stunned) exit;
ObjectID = other.id;
ObjectID.SourceID.image_index = 0;
ObjectID.SourceID.taken = 0;
ObjectID.SourceID = 0;
ObjectID.image_alpha = 1;
ObjectID.phy_active = false;

if(ObjectID.state = scr_hench_sleep){
    ObjectID.rage_limit = max((4+pwr)-minions,0);
    ObjectID.rage+=1;
    ObjectID.show_rage = 1;
    ObjectID.alarm[10] = room_speed*2;
    ObjectID.night_worker = 1;
    scr_effect(spr_Broken);
    if(ObjectID.rage &gt; ObjectID.rage_limit){
        ObjectID.held = 1;
        ObjectID.phy_active = true;
        ObjectID.state = scr_hench_berserk;
        with(ObjectID){
            physics_apply_impulse(x,y,0,-20);
        }
        ObjectID = 0;
        exit;
    }
}
ObjectID.state = scr_hench_idle;
ObjectID.job_index = 0;
ObjectID.held = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_sprite_ext(sprite_index,image_index,x,y-z,image_xscale,image_yscale,angle,image_blend,image_alpha);


//draw_text(x,y,depth);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(points &gt; 0){
    draw_set_font(fnt_title)
    draw_text(x-view_xview[0],y-sprite_yoffset-24-view_yview[0],string(points));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disables the automatic draw
event_inherited();

if(night_controller.alpha&gt;0 &amp;&amp; state==scr_player_movement){
    draw_sprite(spr_Torch,image_index,x+image_xscale*11,y-2);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>6,8</point>
    <point>20,8</point>
    <point>20,32</point>
    <point>6,32</point>
  </PhysicsShapePoints>
</object>
