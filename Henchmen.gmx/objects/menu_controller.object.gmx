<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.numplayers = 0
display_set_gui_size(display_get_width() / 2, display_get_height() / 2);
display_set_gui_maximise(2, 2, 0, 0);

clamplimit = 3;
team = 0;
menuSelect = 0 //Starting Object
menuIndex[0] = "Play"
menuIndex[1] = "Settings"
menuIndex[2] = "Credits"
menuIndex[3] = "Exit"

options = false;
optionsIndex[0] = "Days: "
optionsIndex[1] = "Events: "
optionsIndex[2] = "Day-time: "
optionsIndex[3] = "Night-time: "
optionsIndex[4] = "Done "

gp_num = 4;//gamepad_get_device_count(); //fix later
gp_con = 1;

for (var i = 0; i &lt; gp_num; i++;){
    if gamepad_is_connected(i) {
        gp[i] = true; gp_con++;
    } else {
        gp[i] = false;
    }
}

alarm[0] = room_speed*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check how many controllers are plugged in
gp_con = 1;

for (var i = 0; i &lt; gp_num; i++;){
    if gamepad_is_connected(i) {
        gp[i] = true; gp_con++;
    } else {
        gp[i] = false;
    }
}

alarm[0] = room_speed*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_xbox_controls();
/*
menuSelect += key_punch;
menuSelect -= key_pickup;
menuSelect = clamp(menuSelect,0,clamplimit);
*/
if(key_vert != 0) {
    menuSelect += key_vert*0.25;
    menuSelect = clamp(menuSelect,0,clamplimit);
} else {
    menuSelect = round(menuSelect);
}

if (key_groundpound){
    if (!options){
        switch round(menuSelect){
            case 0:
                settings.gamepads_connected = gp_con;
                room_goto(rm_game);
                break;
            case 1:
                menuSelect = 0;
                clamplimit = 4;
                options = true;
                break;
            case 2:
                //Credits;
                break;
            case 3:
                game_end();
                break;
        }
    }
    else{
        if (menuSelect == 4){
            clamplimit = 3;
            menuSelect = 0;
            options = false;
            for(var i = 0; i &lt; 3; i++) {
                settings.options[i] = round(settings.options[i]);
            }
        }
    }
}
if(options) {
    if(key_hor != 0) {
        if(menuSelect != 4) {
            settings.options[menuSelect] += key_hor*.5;
            settings.options[menuSelect] = clamp(settings.options[menuSelect],1,60);
        }
    } else {
        settings.options[menuSelect] = round(settings.options[menuSelect]);
    }
}

if (keyboard_check_released(vk_escape)){
    game_end();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_set_font(fnt_title);
var col = make_color_rgb(255, 85, 105);
draw_set_color(col);

var vx = view_xview[0];
var vy = view_yview[0];
var vw = view_wview[0];
var vh = view_hview[0];

//draw_sprite(spr_hench_idle_rd2,0,vw/2,vh/4)
draw_text_transformed(vx+vw*.5,vy+vh*.3,"Henchmen",1,1,0);

draw_set_font(fnt_text)
draw_text(vx+vw*.5,vy+vh*.35,"By: Marcus 'Ahlis' Ahlstr√∂m");
draw_text(4*vw*.1,vh*.5,"Connected: "+string(gp_con));
draw_text(6*vw*.1,vh*.5,"Possible: "+string(gp_num));

for (i = 0; i &lt; gp_num; i++) {
    if(i&lt;gp_con){
        var spr = spr_hench_idle_rd2;
    } else {
        var spr = spr_hench_sleep_rd2;
    }
        draw_sprite(spr,0,(vw/2)+32*(i-1.5),vh*.43)
}


if (!options){
    for(i = 0; i&lt;4; i++){
        if (i = round(menuSelect)){ 
            draw_set_color(col);
        } else {
            draw_set_color(c_dkgray);
        }
        draw_text(vw/2,vh*.5+(vh*.04)*i, menuIndex[i]);
    
    }
} else {
    for(i = 0; i&lt;5; i++){
        if (i = round(menuSelect)) draw_set_color(col); else draw_set_color(c_dkgray);
        if(i != 4) {
            draw_text(vw/2,vh*.5+(vh*.04)*i, optionsIndex[i]+string_format(settings.options[i],0,0));
        } else {
            draw_text(vw/2,vh*.5+(vh*.04)*i, optionsIndex[i]);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
