<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hench_idle_rd2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>parent_lifeform</parentName>
  <maskName>spr_hench_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
event_inherited();

alarm[5] = 10;
current_job = noone; //Used when returning things to the chest
job_index = 0; //Used for determining the image_index on the backpack
night_worker = 0;
pwr = 3;
luck = 3;
rage = 1;
rage_limit = 1;
show_rage = 0;
armor = 2;
hit_cd = 0;
distance = 0;
maxhp = 6;
hp = maxhp;
nearest = noone;
nearest_target = noone;
n_tar = noone;
held = false;
SourceID = 0;
progress = 0;
norm_movespd = 1;
movespd = norm_movespd;
energy = 100;
z = 0;
points = 0; //When eating
norm_sprite_yoffset = sprite_yoffset;
last_punched_by = noone;
checked_for_food = false;

iangle = 0;
default_x = 0;
default_y = 0;
xx = 0;
yy = 0;

var team;
var myChestID;
owner = noone;

state = scr_hench_idle;

face = face.r_down;
movement = movement.idle;

//Create sprite array
sprite[movement.idle, face.r_down] = spr_hench_idle_rd2;
sprite[movement.idle, face.r_up] = spr_hench_idle_rd2;
sprite[movement.idle, face.l_up] = spr_hench_idle_rd2;
sprite[movement.idle, face.l_down] = spr_hench_idle_rd2;

sprite[movement.run, face.r_down] = spr_hench_run_rd2;
sprite[movement.run, face.r_up] = spr_hench_run_rd2;
sprite[movement.run, face.l_up] = spr_hench_run_rd2;
sprite[movement.run, face.l_down] = spr_hench_run_rd2;

sprite[movement.punch, face.r_down] = spr_hench_punch_rd2;
sprite[movement.punch, face.r_up] = spr_hench_punch_rd2;
sprite[movement.punch, face.l_up] = spr_hench_punch_rd2;
sprite[movement.punch, face.l_down] = spr_hench_punch_rd2;

sprite[movement.fall, face.r_down] = spr_hench_fall_rd2;
sprite[movement.fall, face.r_up] = spr_hench_fall_rd2;
sprite[movement.fall, face.l_up] = spr_hench_fall_rd2;
sprite[movement.fall, face.l_down] = spr_hench_fall_rd2;

sprite[movement.fly, face.r_down] = spr_hench_fly_rd2;
sprite[movement.fly, face.r_up] = spr_hench_fly_ru2;
sprite[movement.fly, face.l_up] = spr_hench_fly_ru2;
sprite[movement.fly, face.l_down] = spr_hench_fly_rd2;

sprite[movement.eat, face.r_down] = spr_hench_eat_rd2;
sprite[movement.eat, face.r_up] = spr_hench_eat_rd2;
sprite[movement.eat, face.l_up] = spr_hench_eat_rd2;
sprite[movement.eat, face.l_down] = spr_hench_eat_rd2;

sprite[movement.sleepy, face.r_down] = spr_hench_sleep_rd2;
sprite[movement.sleepy, face.r_up] = spr_hench_sleep_rd2;
sprite[movement.sleepy, face.l_up] = spr_hench_sleep_rd2;
sprite[movement.sleepy, face.l_down] = spr_hench_sleep_rd2;

sprite[movement.carried, face.r_down] = spr_hench_carried;
sprite[movement.carried, face.r_up] = spr_hench_carried;
sprite[movement.carried, face.l_up] = spr_hench_carried;
sprite[movement.carried, face.l_down] = spr_hench_carried;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Palette

//Creating an unique palette for drawing
//Creating a palette for currenlty used sprite
palette_index = pal_palette_create(sprite_index);
//Chaning used palette to random one
//If you set argument to true - palettes will also be merged between each other
pal_palette_random( false );
alarm[11] = 2;

//When drawing, palette_index must be used instead of image_blend
//Setting it right here so I don't have to add Draw event
image_blend = palette_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///team color
pal_palette_slot( team, spr_hench_pal )
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show_rage = false
show_rage = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sand particles and footsteps

if (phy_speed &gt; 1){
    var sand = instance_create(x+random(8)-4,y+sprite_yoffset+random(6)-3,anim_end);
    sand.image_speed = 0.25;
}
else{
    part_particles_create(global.ps,x+irandom(4)-2,y+sprite_yoffset,global.pt_footstep,1);
}
alarm[5] = 15;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit
//event_inherited();

script_execute(state);

if(owner.ObjectID != id){
    depth = -y-sprite_yoffset;
}

sprite_index = sprite[movement, face];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//self
draw_sprite_ext(sprite[movement, face],image_index,x,y-z,image_xscale,image_yscale,iangle,image_blend,image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(x,y-32,state_text)

if(show_rage){
    var temp_dir = point_direction(myChestID.x,myChestID.y,x,y);
    var lx = lengthdir_x(20,temp_dir)-view_xview[0];
    var ly = lengthdir_y(20,temp_dir)-z-view_yview[0];
    if(night_worker) {
        draw_sprite(spr_Faces2,7,x+lx,y+ly-3);
    } else {
        draw_sprite(spr_Faces2,rage,x+lx,y+ly-3);
    }
    //draw_sprite(spr_Faces,rage,x,y-4);
}

/*if(show_rage){
    var temp_dir = point_direction(myChestID.x,myChestID.y,x,y);
    //for(i = 0; i &lt; rage_limit; i++){
        var lx = lengthdir_x((i+3)*6,temp_dir);
        var ly = lengthdir_y((i+3)*6,temp_dir);
        if (i &lt; rage){
            //draw_sprite(spr_Broken,0,x,y-sprite_yoffset-8-i*8);
            draw_sprite(spr_Broken,0,x+lx,y+ly);
        }
        else{
            //draw_sprite(spr_Heart,0,x,y-sprite_yoffset-8-i*8);
            draw_sprite(spr_Heart,0,x+lx,y+ly);
        }
    //}
}*/
/*
if(night_worker){
    draw_sprite(spr_moon,0,x,y-norm_sprite_yoffset-8-z);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disables the automatic draw
//Comment

/*draw_line(x,y,xx,yy);
draw_text(x,y-32,state_text);
draw_text(x,y-48,nearest_target);
*/
event_inherited();


if (state != scr_life_attacked &amp;&amp; state != scr_life_stunned){
    draw_sprite_ext(spr_Backpack,job_index,x-image_xscale*2,y-5-z,image_xscale,1,0,c_white,1);
}

//draw_line(x,y,default_x,default_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>3</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,10</point>
    <point>16,10</point>
    <point>16,30</point>
    <point>4,30</point>
  </PhysicsShapePoints>
</object>
